import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Plot from 'react-plotly.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç Date
const convertToISODate = (dateStr) => {
    const year = `20${dateStr.slice(-2)}`; // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã –≥–æ–¥–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º "20" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≥–æ–¥–∞
    const monthStr = dateStr.slice(-5, -2).toUpperCase(); // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ –º–µ—Å—è—Ü–∞
    let day = dateStr.slice(0, dateStr.length - 5); // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –∫–∞–∫ –¥–µ–Ω—å

    const monthMap = {
        JAN: '01', FEB: '02', MAR: '03', APR: '04', MAY: '05', JUN: '06',
        JUL: '07', AUG: '08', SEP: '09', OCT: '10', NOV: '11', DEC: '12'
    };

    const month = monthMap[monthStr];
    if (!month) {
        console.error(`–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—è—Ü –¥–ª—è —Å—Ç—Ä–æ–∫–∏: ${dateStr}`);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å –¥–ª—è –¥–Ω–µ–π, –µ—Å–ª–∏ –¥–µ–Ω—å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
    if (day.length === 1) {
        day = `0${day}`;
    }

    const isoDate = `${year}-${month}-${day}`;
    return new Date(isoDate); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Date
};

const MaxPainByExpirationBlockTrades = () => {
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [asset, setAsset] = useState('BTC'); // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get(`${import.meta.env.VITE_API_URL}/api/max-pain-data?currency=${asset.toLowerCase()}`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
                if (response.data && response.data.maxPainByExpiration) {
                    setData(response.data.maxPainByExpiration);
                } else {
                    console.warn('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', response.data);
                    setData(null);
                }
                setLoading(false);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Max Pain:', error);
                setError(error.message);
                setLoading(false);
            }
        };

        fetchData();
    }, [asset]);

    if (loading) {
        return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    }

    if (error) {
        return <div>–û—à–∏–±–∫–∞: {error}</div>;
    }

    if (!data) {
        return <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
    let expirationDates = Object.keys(data);
    expirationDates = expirationDates.sort((a, b) => convertToISODate(a) - convertToISODate(b));

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è Max Pain
    const maxPainValues = expirationDates.map(exp => data[exp].maxPain);

    return (
        <div className="flow-option-container">
            <div className="flow-option-header-menu">
                <div className="flow-option-header-container">
                    <h2>
                        üò°
                        Max pain by expiration
                    </h2>
                    <div className="asset-option-buttons">
                        <select value={asset} onChange={(e) => setAsset(e.target.value)}>
                            <option value="BTC">Bitcoin</option>
                            <option value="ETH">Ethereum</option>
                        </select>
                        <span className="custom-arrow">
        <svg width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1 1.5L6 6.5L11 1.5" stroke="#667085" stroke-width="1.66667" stroke-linecap="round"
                  stroke-linejoin="round"/>
        </svg>
    </span>
                    </div>
                </div>
                <div className="flow-option-dedicated"></div>
            </div>
            <div className="graph">
                <Plot
                    data={[
                        {
                            x: expirationDates,
                            y: maxPainValues,
                            type: 'scatter',
                            mode: 'lines+markers',
                            marker: {color: '#FF4136'}, // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏
                            line: {shape: 'spline', width: 2} // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏
                        },
                    ]}
                    layout={{
                        paper_bgcolor: '#151518',
                        plot_bgcolor: '#151518',
                        font: {
                            family: 'Arial, sans-serif',
                            size: 14,
                            color: '#FFFFFF'
                        },
                        xaxis: {
                            title: 'Expiration Dates',
                            gridcolor: '#393E47',
                            tickfont: {color: '#FFFFFF'},
                        },
                        yaxis: {
                            title: 'Max Pain Price [$]',
                            gridcolor: '#393E47',
                            tickfont: {color: '#FFFFFF'},
                        },
                        autosize: true,
                        margin: {
                            l: 40,
                            r: 10,
                            b: 40,
                            t: 40,
                            pad: 4
                        },
                    }}
                    useResizeHandler={true}
                    style={{width: '100%', height: '100%'}}
                />
            </div>
        </div>
    );
};

export default MaxPainByExpirationBlockTrades;
